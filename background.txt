You are tasked with integrating an existing React component bundle into the codebase.

The codebase should support:
- React with TypeScript
- Tailwind CSS (v3 or v4)
- Modern build tools (Vite/Next.js)

If your project doesn't support these, provide instructions on how to set them up.

IMPORTANT: The App.tsx file is a showcase/example demonstrating the component usage. You should:
1. Analyze the App component to understand how all the pieces work together
2. Review the supporting components and utilities 
3. Integrate the relevant parts into your project structure
4. Adapt the implementation to match your project's patterns and requirements

## Installation

```bash
npm install framer-motion clsx tailwind-merge
```

## Styles

### index.css

```css
/* This is Tailwind 4 CSS file */
/* Extending Tailwind configuration */
/* Use shadcn/ui format to extend the configuration */
/* Add only the styles that your component needs */

/* Base imports */
@import "tailwindcss";
@import "tw-animate-css";

/* Custom dark variant for targeting dark mode elements */
@custom-variant dark (&:is(.dark *));

/* CSS variables and theme definitions */
@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

/* Light theme variables */
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

/* Dark theme variables */
.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

/* Tailwind base styles */
@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

```


## Component Files

### lib/utils.ts

```tsx
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

```

### App.tsx

```tsx
"use client";

import { motion, useMotionValue, useTransform, animate } from "framer-motion";
import { useEffect, useState } from "react";
import { cn } from "@/lib/utils";

// Chess piece SVG components
function ChessPiece({
  type,
  className,
  delay = 0,
}: {
  type: "king" | "queen" | "rook" | "bishop" | "knight" | "pawn";
  className?: string;
  delay?: number;
}) {
  const pieces = {
    king: "M 50 10 L 45 20 L 40 20 L 40 25 L 35 25 L 35 30 L 30 35 L 30 80 L 70 80 L 70 35 L 65 30 L 65 25 L 60 25 L 60 20 L 55 20 L 50 10 Z M 45 15 L 55 15 L 50 5 Z",
    queen: "M 50 15 L 45 25 L 40 25 L 35 30 L 30 35 L 30 80 L 70 80 L 70 35 L 65 30 L 60 25 L 55 25 L 50 15 Z M 50 10 A 3 3 0 1 1 50 10.01 Z",
    rook: "M 35 20 L 35 30 L 30 35 L 30 80 L 70 80 L 70 35 L 65 30 L 65 20 L 60 20 L 60 25 L 55 25 L 55 20 L 45 20 L 45 25 L 40 25 L 40 20 Z",
    bishop: "M 50 10 L 45 20 L 40 30 L 35 40 L 30 80 L 70 80 L 65 40 L 60 30 L 55 20 L 50 10 Z M 50 15 A 3 3 0 1 1 50 15.01 Z",
    knight: "M 35 80 L 65 80 L 65 50 L 60 45 L 60 35 L 55 30 L 50 25 L 45 25 L 40 30 L 35 35 L 30 45 L 30 50 Z M 55 20 L 60 25 L 55 30 Z",
    pawn: "M 50 20 A 5 5 0 1 1 50 20.01 M 45 25 L 40 35 L 35 45 L 30 80 L 70 80 L 65 45 L 60 35 L 55 25 Z",
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -100, rotate: -15 }}
      animate={{ opacity: 0.15, y: 0, rotate: 0 }}
      transition={{
        duration: 2,
        delay,
        ease: [0.23, 0.86, 0.39, 0.96],
      }}
      className={cn("absolute", className)}
    >
      <motion.div
        animate={{
          y: [0, 20, 0],
          rotate: [0, 5, 0],
        }}
        transition={{
          duration: 15,
          repeat: Number.POSITIVE_INFINITY,
          ease: "easeInOut",
        }}
      >
        <svg
          width="100"
          height="100"
          viewBox="0 0 100 100"
          className="fill-white/20 stroke-white/30 stroke-[1.5]"
        >
          <path d={pieces[type]} />
        </svg>
      </motion.div>
    </motion.div>
  );
}

// Checkered pattern background
function ChessboardPattern() {
  return (
    <div className="absolute inset-0 opacity-10">
      <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <pattern
            id="chessboard"
            x="0"
            y="0"
            width="80"
            height="80"
            patternUnits="userSpaceOnUse"
          >
            <rect x="0" y="0" width="40" height="40" fill="#ffffff" />
            <rect x="40" y="0" width="40" height="40" fill="transparent" />
            <rect x="0" y="40" width="40" height="40" fill="transparent" />
            <rect x="40" y="40" width="40" height="40" fill="#ffffff" />
          </pattern>
        </defs>
        <rect width="100%" height="100%" fill="url(#chessboard)" />
      </svg>
    </div>
  );
}

// Floating chess squares
function FloatingSquare({
  delay = 0,
  size = 60,
  className,
}: {
  delay?: number;
  size?: number;
  className?: string;
}) {
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{
        duration: 1.5,
        delay,
        ease: "easeOut",
      }}
      className={cn("absolute", className)}
    >
      <motion.div
        animate={{
          y: [0, -30, 0],
          rotate: [0, 180, 360],
        }}
        transition={{
          duration: 20,
          repeat: Number.POSITIVE_INFINITY,
          ease: "linear",
        }}
        style={{ width: size, height: size }}
        className="relative"
      >
        <div className="absolute inset-0 bg-gradient-to-br from-white/10 to-transparent border border-white/20 backdrop-blur-sm" />
        <div className="absolute inset-[2px] bg-gradient-to-tl from-white/5 to-transparent" />
      </motion.div>
    </motion.div>
  );
}

function ChessBackground({
  badge = "Strategic Design",
  title1 = "Master Your",
  title2 = "Digital Strategy",
  description = "Every move matters. Create exceptional experiences with precision and elegance.",
}: {
  badge?: string;
  title1?: string;
  title2?: string;
  description?: string;
}) {
  const fadeUpVariants = {
    hidden: { opacity: 0, y: 30 },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: {
        duration: 1,
        delay: 0.5 + i * 0.2,
        ease: [0.25, 0.4, 0.25, 1],
      },
    }),
  };

  return (
    <div className="relative min-h-screen w-full flex items-center justify-center overflow-hidden bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950">
      {/* Gradient overlays */}
      <div className="absolute inset-0 bg-gradient-to-br from-emerald-500/[0.03] via-transparent to-amber-500/[0.03] blur-3xl" />
      <div className="absolute inset-0 bg-gradient-to-tl from-blue-500/[0.02] via-transparent to-purple-500/[0.02] blur-3xl" />

      {/* Checkered pattern */}
      <ChessboardPattern />

      {/* Chess pieces */}
      <div className="absolute inset-0 overflow-hidden">
        <ChessPiece
          type="king"
          delay={0.3}
          className="left-[5%] top-[15%] scale-150"
        />
        <ChessPiece
          type="queen"
          delay={0.5}
          className="right-[8%] top-[20%] scale-125"
        />
        <ChessPiece
          type="rook"
          delay={0.4}
          className="left-[15%] bottom-[15%] scale-110"
        />
        <ChessPiece
          type="bishop"
          delay={0.6}
          className="right-[20%] bottom-[20%] scale-100"
        />
        <ChessPiece
          type="knight"
          delay={0.7}
          className="left-[25%] top-[10%] scale-90"
        />
        <ChessPiece
          type="pawn"
          delay={0.8}
          className="right-[30%] top-[25%] scale-75"
        />
        <ChessPiece
          type="pawn"
          delay={0.9}
          className="left-[35%] bottom-[25%] scale-75"
        />
      </div>

      {/* Floating squares */}
      <div className="absolute inset-0 overflow-hidden">
        <FloatingSquare delay={0.2} size={80} className="left-[10%] top-[30%]" />
        <FloatingSquare delay={0.4} size={60} className="right-[15%] top-[40%]" />
        <FloatingSquare delay={0.6} size={70} className="left-[20%] bottom-[30%]" />
        <FloatingSquare delay={0.8} size={50} className="right-[25%] bottom-[35%]" />
        <FloatingSquare delay={1.0} size={65} className="left-[40%] top-[20%]" />
        <FloatingSquare delay={1.2} size={55} className="right-[40%] bottom-[25%]" />
      </div>

      {/* Content */}
      <div className="relative z-10 container mx-auto px-4 md:px-6">
        <div className="max-w-4xl mx-auto text-center">
          <motion.div
            custom={0}
            variants={fadeUpVariants}
            initial="hidden"
            animate="visible"
            className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-white/[0.05] border border-white/[0.15] mb-8 md:mb-12 backdrop-blur-sm"
          >
            <div className="w-2 h-2 rounded-full bg-gradient-to-r from-emerald-400 to-amber-400" />
            <span className="text-sm text-white/70 tracking-wide font-medium">
              {badge}
            </span>
          </motion.div>

          <motion.div
            custom={1}
            variants={fadeUpVariants}
            initial="hidden"
            animate="visible"
          >
            <h1 className="text-5xl sm:text-6xl md:text-8xl font-bold mb-6 md:mb-8 tracking-tight">
              <span className="bg-clip-text text-transparent bg-gradient-to-b from-white via-white/90 to-white/70">
                {title1}
              </span>
              <br />
              <span className="bg-clip-text text-transparent bg-gradient-to-r from-emerald-300 via-white to-amber-300">
                {title2}
              </span>
            </h1>
          </motion.div>

          <motion.div
            custom={2}
            variants={fadeUpVariants}
            initial="hidden"
            animate="visible"
          >
            <p className="text-base sm:text-lg md:text-xl text-white/50 mb-10 leading-relaxed font-light tracking-wide max-w-2xl mx-auto px-4">
              {description}
            </p>
          </motion.div>

          <motion.div
            custom={3}
            variants={fadeUpVariants}
            initial="hidden"
            animate="visible"
            className="flex flex-col sm:flex-row gap-4 justify-center items-center"
          >
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="px-8 py-4 rounded-full bg-gradient-to-r from-emerald-500 to-amber-500 text-white font-semibold text-sm shadow-lg hover:shadow-xl transition-all duration-300"
            >
              Start Playing
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="px-8 py-4 rounded-full bg-white/[0.05] border border-white/20 text-white font-medium text-sm backdrop-blur-sm hover:bg-white/[0.1] transition-all duration-300"
            >
              Learn More
            </motion.button>
          </motion.div>
        </div>
      </div>

      {/* Vignette effect */}
      <div className="absolute inset-0 bg-gradient-to-t from-slate-950 via-transparent to-slate-950/80 pointer-events-none" />
      <div className="absolute inset-0 bg-gradient-to-r from-slate-950/50 via-transparent to-slate-950/50 pointer-events-none" />
    </div>
  );
}

export default function ChessBackgroundDemo() {
  return (
    <ChessBackground
      badge="Strategic Excellence"
      title1="Master Your"
      title2="Digital Strategy"
      description="Every move matters. Create exceptional experiences with precision and elegance."
    />
  );
}

```


## Tailwind Configuration

Add the following global styles:

```css
@layer base {
  * {
    @apply border-border outline-ring/50;
  }
```

Custom colors detected: gradient-to-br, gradient-to-tl, gradient-to-r, clip-text, gradient-to-b, gradient-to-t
Make sure these are defined in your Tailwind configuration.


## Integration Instructions

1. Review the App.tsx component to understand the complete implementation
2. Identify which components and utilities you need for your use case
3. Analyze the Tailwind v4 styles in index.css - integrate custom styles that differ from integrating Codebase
4. Install the required NPM dependencies listed above
5. Integrate the components into your project, adapting them to fit your architecture

Focus on:
- Understanding projects structure, adding above components into it
- Understanding the component composition
- Identifying reusable utilities and helpers
- Adapting the styling to match your design system